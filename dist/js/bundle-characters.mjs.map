{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Board.mjs","webpack:///./src/js/Characters.mjs","webpack:///./src/js/VAR.mjs","webpack:///./src/js/index.mjs"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAA8B;AACG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+BAA+B;AAC7C,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,YAAY,6BAA6B;AACzC;AACO;AACP;AACA;AACA,gCAAgC,4CAAG,0CAA0C;AAC7E;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA,sCAAsC;;AAEtC,0BAA0B;AAC1B;;AAEA,oBAAoB,kBAAkB,MAAM;AAC5C,wBAAwB;AACxB,wBAAwB,oBAAoB,MAAM;AAClD;AACA,mGAAmG;;AAEnG;AACA,uCAAuC,WAAW,E;AAClD;AACA;AACA;AACA,uBAAuB,4CAAG,2BAA2B;AACrD;;AAEA,6C;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mBAAmB,MAAM;;AAEzC,gBAAgB,uBAAuB,MAAM;AAC7C,IAAI,+CAAI;AACR,QAAQ,+CAAI;AACZ;AACA;AACA;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","file":"bundle-characters.mjs","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/Characters.mjs\");\n","import {VAR} from './VAR.mjs';\nimport {Game} from './index.mjs';\n\nBoard.templates = [ // creating board templates here\n    [\n        'WWWWWWWWWWWWWWW',\n        'W             W',\n        'W X X X X X X W',\n        'W             W',\n        'W X X X X X X W',\n        'W             W',\n        'W X X X X X X W',\n        'W             W',\n        'W X X X X X X W',\n        'W             W',\n        'WWWWWWWWWWWWWWW'\n    ],\n    [\n        'WWWWWWWWWWWWWWW',\n        'W             W',\n        'W X XXX XXX X W',\n        'W             W',\n        'W X X X X X X W',\n        'W X         X W',\n        'W X X X X X X W',\n        'W             W',\n        'W XXX X X XXX W',\n        'W             W',\n        'WWWWWWWWWWWWWWW'\n    ]\n]\n\n// define all board elements\n// type: defines what kind of material it is:\n// empty - you can walk on it\n// soft - you can destroy it\n// solid - undestructible\nBoard.elements = {\n    'floor': {sx: 174, sy: 16, type: 'empty'},\n    'W': {sx: 190, sy: 16, type: 'solid'}, // outer wall\n    'X': {sx: 206, sy: 16, type: 'solid'}, // inner wall\n    'box': {sx: 126, sy: 0, type: 'soft'},\n}\nexport function Board(){\n    this.frameWidth = 16;\n    this.frameHeight = 16;\n    this.parse(Board.templates[ VAR.random(0, Board.templates.length - 1) ]); // pick rundom board from our templates and convert it into right format\n    // add boxes on the board\n    for( let i = 0 ; i < 20 ; i++){\n        this.addCrate();\n    }\n}\n\nBoard.prototype.parse = function(arr){ // convert string board to array of arrays with objects inside\n    \n    this.emptySpaces = []; // array to store all exisiting empty places (grass) on board\n    this.b = [];\n    \n    for (let i = 0 ; i <  arr.length ; i++){ // iterate through each raw of the board\n        this.b.push([]); // create array for each row of the board\n        for (let j = 0 ; j < arr[i].length ; j++){ // iterate through each element (letter) in each row\n            // push corresponding object definition in place of a specific letter key\n            this.b[i].push( Board.elements[arr[i].charAt(j) == ' ' ? 'floor' : arr[i].charAt(j)] ); // pick appropriate obj definition from Board.elements\n            \n            if (this.b[i][j].type === 'empty' && !(i==1 && j == 1) && !(i==2 && j==1) && !(i==1 && j==2)){\n                this.emptySpaces.push({ x:j, y:i }); \n            }\n        }\n    }\n    this.emptySpaces = VAR.shuffle(this.emptySpaces); // shuffle array storing empty spaces\n};\n\nBoard.prototype.getEmptySpace = function () { \n    return this.emptySpaces.length > 0 ? this.emptySpaces.shift() : null;\n};\n\nBoard.prototype.addCrate = function () { // adding crate\n    let position = this.getEmptySpace();\n    if(position){\n        this.b[position.y][position.x] = Board.elements.box;\n    }\n};\n\nBoard.prototype.draw = function(){\nfor (let i = 0 ; i < this.b.length; i++){ // iterate through each row\n\nfor (let j = 0 ; j < this.b[i].length ; j++){ // iterate through each element in each row\n    Game.ctx.drawImage( // draw method\n        Game.sprite, // image source\n        this.b[i][j].sx, // coords\n        this.b[i][j].sy,\n        this.frameWidth, // size\n        this.frameHeight,\n        j * this.frameWidth * VAR.scale, // where to put it on canvas\n        i * this.frameHeight * VAR.scale,\n        this.frameWidth * VAR.scale, // how big is the drawn image\n        this.frameHeight * VAR.scale\n    )    \n    }\n\n}\n}","import {Game} from './index.mjs';\nimport {VAR} from './VAR.mjs';\n\nCharacter.count = 0;\n\nexport function Character(inheritance){\n    Character.count++; // controlling how many characters have been generated\n    this.id = `char_${Character.count}`; // setting specific id to each character\n    \n    if (!inheritance){ // allowed only if given argument is true\n        Game.toDraw[this.id] = this; // pushing created character into object stroing all characters\n    }\n    \n    this.frameWidth = 21; // width of a sprite\n    this.frameHeight = 24; // height of a sprite\n\n    this.modX = -2;\n    this.modY = -8;\n\n    this.speed = 2;\n\n    this.currentFrame = 0; // current frame of animation\n\n    this.maxFrameDelay = 2; // properties to slow down animation\n    this.currentFrameDelay = 0;\n}\n\nCharacter.prototype.draw = function (){ // draw method prototype\n    // char speed depending on his state\n    if (this.state == 'down_go'){\n        this.y += this.speed;\n    } else if (this.state == 'right_go'){\n        this.x += this.speed;\n    }else if (this.state == 'up_go'){\n        this.y -= this.speed;\n    }else if (this.state == 'left_go'){\n        this.x -= this.speed;\n    };\n\n    if(this.states[this.state].flip){ // inverse image if 'flip' property is true\n    Game.ctx.save(); // saving a given canvas state\n    Game.ctx.scale(-1,1); // inversing canvas\n}\n\n    Game.ctx.drawImage( // definig what part of image should be clipped\n        Game.sprite,\n        this.states[this.state].sx + this.states[this.state].f[this.currentFrame]*this.frameWidth,\n        this.states[this.state].sy,\n        this.frameWidth,\n        this.frameHeight,\n        this.states[this.state].flip ? (-this.frameWidth - this.modX - this.x )*VAR.scale : (this.x + this.modX)*VAR.scale,\n        (this.y+this.modY)*VAR.scale,\n        this.frameWidth*VAR.scale,\n        this.frameHeight*VAR.scale\n    );\n    if(this.states[this.state].flip){\n        Game.ctx.restore(); // restoring previously saved canvas state\n      \n    };\n    if (this.currentFrameDelay < this.maxFrameDelay){ // slowing down animation\n        this.currentFrameDelay++;\n    } else {\n        this.currentFrameDelay = 0;\n        this.currentFrame = this.currentFrame+1 >= this.states[this.state].f.length ? 0 : this.currentFrame+1;\n    }\n}\n\nexport function Hero(){ // deifing main hero\n    Character.call(this); // extending Character class\n    this.state = 'down'; // current animation state of Hero\n    this.states = { // definig all possible animation states of Hero\n        'down': {sx:0, sy:0, f:[0]},\n        'down_go': {sx:0, sy:0, f:[1,0,2,0]},\n        'left': {sx:63, sy:0, f:[0]},\n        'left_go': {sx:63, sy:0, f:[1,0,2,0]},\n        'up': {sx:0, sy:24, f:[0]},\n        'up_go': {sx:0, sy:24, f:[1,0,2,0]},\n        'right': {sx:63, sy:0, f:[0], flip: true}, // flip set up to inverse character graphics\n        'right_go': {sx:63, sy:0, f:[1,0,2,0], flip: true},\n        'ko': {sx: 0, sy: 48, f:[0,1,0,1,0,1,2,3,4]} // death animation\n    };\n    this.x = Game.board.frameWidth;\n    this.y = Game.board.frameHeight;\n}\n\nHero.prototype = new Character(true); // extending Character draw method to Hero constructor\nHero.prototype.constructor = Hero;\n\nHero.prototype.updateState = function(){\n    this.tempState = null; // temporary state variable\n    if (Game.key_37){ // when arrow left is pressed then change temporary state to left_go\n        this.tempState = 'left_go';\n    } else if (Game.key_38){ // when arrow left is pressed then change temporary state to left_go\n        this.tempState = 'up_go';\n    }else if (Game.key_39){ // when arrow left is pressed then change temporary state to left_go\n        this.tempState = 'right_go';\n    }else if (Game.key_40){ // when arrow left is pressed then change temporary state to left_go\n        this.tempState = 'down_go';\n    }else if (this.state.slice(-2) == 'go'){ // check if current active state was with 'go' ending\n    console.log('puszczam');    \n    this.tempState = this.state.slice(0,this.state.indexOf('_go')); // slice last 3 digits to be left with static state\n    }\n    if (this.tempState!= this.state){ // check if state has changed\n        this.currentFrame = 0;\n        this.state = this.tempState; // reasign state to temporary state\n    }\n}\n\nexport function Enemy(){\n    Character.call(this);\n    this.state = 'left_go'; // current animation state of Enemy\n    this.states = { // definig all possible animation states of Enemy\n        'down': {sx:0, sy:72, f:[0]}, // static\n        'down_go': {sx:0, sy:72, f:[1,0,2,0]}, // dynamic\n        'left': {sx:63, sy:24, f:[0]},\n        'left_go': {sx:63, sy:24, f:[1,0,2,0]},\n        'up': {sx:63, sy:72, f:[0]},\n        'up_go': {sx:63, sy:72, f:[1,0,2,0]},\n        'right': {sx:63, sy:24, f:[0], flip: true}, // flip set up to inverse character graphics\n        'right_go': {sx:63, sy:24, f:[1,0,2,0], flip: true},\n        'ko': {sx: 0, sy: 96, f:[0,1,2,3,4,5]} // death animation\n    }\n}\n\nEnemy.prototype = new Character(true); // extending Character draw method to Hero constructor\nEnemy.prototype.constructor = Enemy;","// variable used to store handy properties used among the way\nexport const VAR = { \n    fps: 15, // frames per second for animation\n    H: 0, // window height\n    W: 0, // window width\n    scale: 4, // game elements will be loaded in proper scale\n    lastTime: 0, // property for rAF\n    random: (min, max)=>{ // ranodm number generator\n        return Math.floor(Math.random()* (max-min+1) )+ min;\n    },\n    shuffle: function (arr) { // method to shuffle array of emty spaces\n        let counter = arr.length;\n        let temp;\n        let index;\n        while(counter > 0){\n            counter--;\n            index = Math.floor(Math.random()*counter);\n            temp = arr[counter];\n            arr[counter] = arr[index];\n            arr[index] = temp;\n        }\n        return arr;\n    }\n}","import {Character, Hero, Enemy} from './Characters.mjs';\nimport {VAR} from './VAR.mjs';\nimport {Board} from './Board.mjs';\n\ndocument.addEventListener('DOMContentLoaded', function (){ \n    Game.sprite = new Image();\n    Game.sprite.onload = Game.init; // makes sure that init() is launched after image is loaded\n    Game.sprite.src = 'dist/img/bombe.png';\n});\n\n// object containg basic game properties\nexport let Game = {\n    init: ()=> {\n        Game.canvas = document.createElement('canvas'); // create canvas\n        Game.ctx = Game.canvas.getContext('2d'); // get canvas 2d context\n        Game.board = new Board();\n        Game.layout(); // launch function to resize W and H based on window inner dimensions\n        window.addEventListener('resize', Game.layout); // launch layout() function on window resize\n        document.body.appendChild(Game.canvas); // append canvas to DOM\n    \n        Game.toDraw = {}; // object to store all characters   \n\n        Game.hero = new Hero();\n\n        // add event listeners for char sterring\n        \n        window.addEventListener('keydown', Game.onKey);\n        window.addEventListener('keyup', Game.onKey);\n\n        // Game.enemy = new Enemy();\n\n        Game.animationLoop(); // launch game animation loop\n        },\n\n    onKey: (e)=>{\n        if (e.keyCode >= 37 && e.keyCode<= 40 || e.keyCode == 32){ // use only arrows and space in game\n            e.preventDefault(); // turn off standard key actions\n            if(e.type == 'keydown' && !Game[`key_${e.keyCode}`]){ // when key has been pressed\n                Game[`key_${e.keyCode}`] = true; // set key to work\n                if(e.keyCode >= 37 && e.keyCode <= 40 ){ // if any arrow was pressed then make sure to disable previously pressed arrow\n                    for (let i = 37; i <= 40 ; i++){\n                        if(i!= e.keyCode){\n                            Game[`key_${i}`] = false;\n                        }\n                    }\n                }\n                Game.hero.updateState(); // launch update function when key is pressed (conditions above)\n            } else if (e.type == 'keyup'){ // update state when key is released as well (char is standing)\n                Game[`key_${e.keyCode}`] = false;\n                Game.hero.updateState();\n            }\n        }\n    },\n\n    layout: ()=> {\n        VAR.H = window.innerHeight; // get window dimensions dynamically\n        VAR.W = window.innerWidth; // as above\n        \n        VAR.scale = Math.max(1, Math.min( \n            Math.floor(VAR.H/(Game.board.frameWidth*Game.board.b[0].length)),\n            Math.floor(VAR.W/(Game.board.frameHeight*Game.board.b.length))\n            ));\n                \n        Game.canvas.width = Math.round(VAR.scale*Game.board.frameWidth*Game.board.b[0].length); // as above\n        Game.canvas.height = Math.round(VAR.scale*Game.board.frameHeight*Game.board.b.length); // set canvas dimensions based on window dimensions\n        \n        Game.canvas.style[Modernizr.prefixed('transform')] = `translate(${Math.round( (VAR.W-Game.canvas.width)/2 )}px, ${Math.round( (VAR.H-Game.canvas.height)/2 ) }px)`;\n        \n//'translate('+Math.round((VAR.W-Game.canvas.width)/2) + 'px,' +Math.round((VAR.H-Game.canvas.height)/2)+'px)';\n        Game.ctx.imageSmoothingEnabled = false; // character pixels are super sharp\n        Game.ctx.mozImageSmoothingEnabled = false;\n        Game.ctx.oImageSmoothingEnabled = false;\n        Game.ctx.webkitImageSmoothingEnabled = false;\n    },\n\n    animationLoop: (time)=> {\n        requestAnimationFrame(Game.animationLoop);\n        // limit fps to desired rate\n            if(time-VAR.lastTime >= 1000/VAR.fps){\n                VAR.lastTime = time;\n\n                Game.ctx.clearRect(0,0,VAR.W, VAR.H);\n                \n                Game.board.draw();\n                \n                for(let i in Game.toDraw){        \n                        Game.toDraw[i].draw();\n                }\n            }\n        }\n}"],"sourceRoot":""}